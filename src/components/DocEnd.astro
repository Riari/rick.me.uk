---
import CloseIcon from "./Icons/CloseIcon.astro";
import CheckIcon from "./Icons/CheckIcon.astro";
---

<div class="modal-overlay">
    <div class="modal modal--menu">
        <nav>
            <ul>
                <li><a href="/">Home</a></li>
                <li><a href="/projects/">Projects</a></li>
                <li><a href="/posts/1/">Posts</a></li>
                <li><a href="/tags/">Tags</a></li>
            </ul>
        </nav>

        <a href="#" data-close-modal=".modal--menu">
            Close <CloseIcon width="24" height="24" />
        </a>
    </div>

    <div class="modal modal--theme">
        <a href="#" class="modal-close" data-close-modal=".modal--theme">
            <CloseIcon width="32px" height="32px" />
        </a>

        <h3>Theme</h3>

        <div class="radio-group">
            <div class="radio-group-item">
                <input
                    id="theme-system"
                    type="radio"
                    name="theme"
                    value="system"
                />
                <label for="theme-system"
                    ><CheckIcon width="24" height="24" /> System</label
                >
            </div>
            <div class="radio-group-item">
                <input id="theme-dark" type="radio" name="theme" value="dark" />
                <label for="theme-dark"
                    ><CheckIcon width="24" height="24" /> Dark</label
                >
            </div>
            <div class="radio-group-item">
                <input
                    id="theme-light"
                    type="radio"
                    name="theme"
                    value="light"
                />
                <label for="theme-light"
                    ><CheckIcon width="24" height="24" /> Light</label
                >
            </div>
        </div>
    </div>
</div>

<script>
    import mediumZoom, { type Zoom } from "medium-zoom";

    const modalOverlay: HTMLDivElement =
        document.querySelector(".modal-overlay")!;
    const themeRadios: NodeListOf<HTMLInputElement> = document.querySelectorAll(
        "input[type=radio][name=theme]",
    );
    const mediumZoomBackgroundLight = "#fff";
    const mediumZoomBackgroundDark = "#21212b";
    var zoom: Zoom;

    function applyTheme(name: string) {
        document.documentElement.dataset.theme = name;

        const prefersDark = (name == "system" && window.matchMedia("(prefers-color-scheme: dark)").matches)
                            || name == "dark";

        zoom.update({
            background: prefersDark
                ? mediumZoomBackgroundDark
                : mediumZoomBackgroundLight,
        });
    }

    const theme: string = localStorage.getItem("theme") ?? "system";

    const themeIndexMap: Map<string, number> = new Map();
    themeIndexMap.set("system", 0);
    themeIndexMap.set("dark", 1);
    themeIndexMap.set("light", 2);

    themeRadios[themeIndexMap.get(theme)!].checked = true;
    zoom = mediumZoom(document.querySelectorAll("[data-zoomable]"));
    applyTheme(theme);

    for (var i = 0; i < themeRadios.length; ++i) {
        themeRadios[i].addEventListener(
            "change",
            function (this: HTMLInputElement, _: Event) {
                localStorage.setItem("theme", this.value);
                applyTheme(this.value);
            },
        );
    }

    const openModalLinks =
        document.querySelectorAll<HTMLAnchorElement>("a[data-open-modal]");
    for (let i = 0; i < openModalLinks.length; ++i) {
        openModalLinks[i].addEventListener(
            "click",
            function (this: HTMLAnchorElement, event: Event) {
                event.preventDefault();
                modalOverlay.style.display = "block";
                modalOverlay.querySelector<HTMLElement>(
                    this.dataset.openModal!,
                )!.style.display = "block";
            },
        );
    }

    const closeModalLinks = document.querySelectorAll<HTMLAnchorElement>(
        "a[data-close-modal]",
    );
    for (let i = 0; i < closeModalLinks.length; ++i) {
        closeModalLinks[i].addEventListener(
            "click",
            function (this: HTMLAnchorElement, event: Event) {
                event.preventDefault();
                modalOverlay.style.display = "none";
                modalOverlay.querySelector<HTMLElement>(
                    this.dataset.closeModal!,
                )!.style.display = "none";
            },
        );
    }

    function closeModals() {
        const modals = document.querySelectorAll<HTMLElement>(".modal");
        for (var i = 0; i < modals.length; i++) {
            modals[i].style.display = "none";
        }

        modalOverlay.style.display = "none";
    }

    document.onkeydown = function (event) {
        if (event.key == "Escape") closeModals();
    };

    modalOverlay.addEventListener("click", function (event) {
        if (this != event.target) return;
        closeModals();
    });

    const hoverSpan = document.createElement("span");
    hoverSpan.classList.add("button__hover");

    document.querySelectorAll(".button").forEach(function (element: Element) {
        element.appendChild(hoverSpan.cloneNode());

        element.addEventListener(
            "mouseleave",
            function (this: HTMLElement, event: any) {
                this.style.background = "";

                const hoverSpan = event.target.querySelector(".button__hover");
                hoverSpan.style.opacity = "0.0";
            },
        );

        element.addEventListener(
            "mousemove",
            function (this: HTMLElement, event: any) {
                const rect = this.getBoundingClientRect();
                const mouseX = event.clientX - rect.left;
                const mouseY = event.clientY - rect.top;

                const hoverSpan =
                    this.querySelector<HTMLElement>(".button__hover");

                if (!hoverSpan) return;

                hoverSpan.style.opacity = "1.0";
                hoverSpan.style.left = `${mouseX - hoverSpan.offsetWidth / 2}px`;
                hoverSpan.style.top = `${mouseY - hoverSpan.offsetHeight / 2}px`;
            },
        );
    });
</script>
