---

---

<div class="modal-overlay">
    <div class="modal modal--settings">
        <a href="#" class="modal-close" data-close-modal=".modal--settings">
            <img src="/icons/close.svg" alt="Close" />
        </a>

        <h3>Settings</h3>

        <p><b>Theme</b></p>

        <label class="b-contain">
            <span>System</span>
            <input type="radio" name="theme" value="system" />
            <div class="b-input"></div>
        </label>
        <label class="b-contain">
            <span>Dark</span>
            <input type="radio" name="theme" value="dark" />
            <div class="b-input"></div>
        </label>
        <label class="b-contain">
            <span>Light</span>
            <input type="radio" name="theme" value="light" />
            <div class="b-input"></div>
        </label>
    </div>
</div>
</body>

<script>
    import mediumZoom, { type Zoom } from 'medium-zoom';
    import CookieUtil from '../js/cookie-util';

    const modalOverlay: HTMLDivElement = document.querySelector('.modal-overlay')!;
    const themeRadios: NodeListOf<HTMLInputElement> = document.querySelectorAll('input[type=radio][name=theme]');
    const mediumZoomBackgroundLight = '#fff';
    const mediumZoomBackgroundDark = '#21212b';
    var zoom: Zoom;

    const themeIndexMap: Map<string, number> = new Map();
    themeIndexMap.set('system', 0);
    themeIndexMap.set('dark', 1);
    themeIndexMap.set('light', 2);

    const themeClasses: Array<string> = [
        'theme--system',
        'theme--dark',
        'theme--light'
    ];

    function setTheme(name: string) {
        for (var i = 0; i < themeClasses.length; ++i) {
            document.body.classList.remove(themeClasses[i]);
        }

        document.body.classList.add(themeClasses[themeIndexMap.get(name)!]);

        const prefersDark = name == 'system' && (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) || name == 'dark';

        zoom.update({ background: prefersDark ? mediumZoomBackgroundDark : mediumZoomBackgroundLight });
    }

    for (var i = 0; i < themeRadios.length; ++i) {
        themeRadios[i].addEventListener('change', function (this: HTMLInputElement, _: Event) {
            const expireAt = new Date();
            expireAt.setDate(expireAt.getDate() + 30);
            CookieUtil.set('theme', this.value, expireAt);
            setTheme(this.value);
        });
    }


    document.addEventListener("DOMContentLoaded", function (_: Event) {
        var theme = CookieUtil.get('theme');
        if (!theme) theme = 'system';

        themeRadios[themeIndexMap.get(theme)!].checked = true;

        zoom = mediumZoom(document.querySelectorAll('[data-zoomable]'));

        setTheme(theme);
    });

    document.querySelector<HTMLAnchorElement>('a[data-open-modal]')!.addEventListener('click', function (this: HTMLAnchorElement, event: Event) {
        event.preventDefault();
        modalOverlay.style.display = 'block';
        modalOverlay.querySelector<HTMLElement>(this.dataset.openModal!)!.style.display = 'block';
    });

    document.querySelector<HTMLAnchorElement>('a[data-close-modal]')!.addEventListener('click', function (this: HTMLAnchorElement, event: Event) {
        event.preventDefault();
        modalOverlay.style.display = 'none';
        modalOverlay.querySelector<HTMLElement>(this.dataset.closeModal!)!.style.display = 'none';
    });

    function closeModals() {
        const modals = document.querySelectorAll<HTMLElement>('.modal');
        for (var i = 0; i < modals.length; i++) {
            modals[i].style.display = 'none';
        }

        modalOverlay.style.display = 'none';
    }
    
    document.onkeydown = function(event) {
        if (event.key == 'Escape') closeModals();
    }

    modalOverlay.addEventListener('click', function (event) {
        if (this != event.target) return;
        closeModals();
    });
</script>

</html>